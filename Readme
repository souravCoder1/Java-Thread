	  1.) ExecutorService es = Executors.newCachedThreadPool();
	   	- going to return an executorService that can dynamically
	   		reuse threads
	 		- before starting a job -> it going to check whether there are any threads that
	 			finished the job...reuse them
	 		- if there are no waiting threads -> it is going to create another one 
	 		- good for the processor ... effective solution !!!
	 
	 	2.) ExecutorService es = Executors.newFixedThreadPool(N);
	 		- maximize the number of threads
	 		- if we want to start a job -> if all the threads are busy, we have to wait for one
	 			to terminate
	 
	 	3.) ExecutorService es = Executors.newSingleThreadExecutor();
	 		It uses a single thread for the job
	 
	 		execute() -> runnable + callable
	 		submit() -> runnable
